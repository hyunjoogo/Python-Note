# 맵의 크기는 n, m
# x, y, d 북 -0, 동-1, 남 -2 , 서-3
# 맵에 대한 정보가 나온다.

# 맵을 입력받는다.

# 나의 풀이법 : 문제푸는 시간 초과

# 이동한 곳은 2로 바꾼다.
# 이동하는 방법
# 바라보는 방향이 0(북)이면 [y][x-1]의 값을 본다
#  - 만약 0이면 방향을 3(서)로 변경 => 현재 좌표를 변경 => count 업
#  - 만약 1 and 2 이면
#  - 만약 1 or 2이면 바라보는 방향을 3(서)으로 바꾼다.
# 바라보는 방향이 1(동)이면 [y-1][x]의 값을 본다
#  - 만약 0이면 방향을 0(북)로 변경 => 현재 좌표를 변경 => count 업
#  - 만약 1 or 2이면 바라보는 방향을 0(북)으로 바꾼다.


# 바라보는 방향이 1(동)이면 [y-1][x]의 값을 본다
#  - 만약 0이면 방향을 3(서)로 변경 => 현재 좌표를 변경 => count 업
#  - 만약 1 or 2이면 바라보는 방향을 0(북)으로 바꾼다.

# 다른 사람 풀이법 :
# 방문한 위치를 저장하기 위한 0으로 맵 생성
# 현재 위치는 1로 만들기

# 2차원 배열의 전체 맵 만들기

# 방향 정의하기 dx, dy
# 이제 x는 아래로 y는 오른쪽으로

# 왼쪽으로 회전 함수 만들기

n, m = map(int, input().split())
d = [[0] * m for _ in range(n)]

x, y, direction = map(int, input().split())
d[x][y] = 1

# 북 동 남 서
dx = [-1, 0, 1, 0]
dy = [0, 1, 0, -1]


def turn_left():
    global direction
    direction -= 1
    if direction == -1:
        direction = 3


print(d)
'''
4 4
1 1 0
1 1 1 1
1 0 0 1
1 1 0 1
1 1 1 1
'''
